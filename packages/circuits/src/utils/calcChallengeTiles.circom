pragma circom 2.1.2;

include "calcMerkleRoot.circom";
include "isEqualToAny.circom";
include "calcMerkleRoot.circom";

// Outputs challenge tiles based on the supplied ofsets and position, and verifies that the 
// challenge tiles offsets are valid
template CalcChallengeTiles() {
    var tileCount = 4;

    signal input x, y;
    signal input challengeTilesOffsetsXValues[tileCount], challengeTilesOffsetsYValues[tileCount];
    
    signal output challengeTilesXValues[tileCount], challengeTilesYValues[tileCount];

    var directionCount = 32;
    var offsetsRootList[directionCount] = [
        8064922012225928546443258086527263208868089486546406649922835270640116007519,
        11697654165720819748772011009203187644166088452598222000098975315328236221582,
        1800923358916051152594512062420050486913523581714347387030270210083203294364,
        21393761585730715571726899139209766563583583970492893405730833003299873200299,
        21771054893639295328289742600234163733174728171840220952740835886926151197684,
        3374617292000391160114168554191429855696112300783624509169440140330886784493,
        17552331021573639328247489040916542669735149440205448796290544082021181687828,
        7466667602117510650167932096305216581779834082567721090007427253776618040413,
        13561245368002431558424633190218908160869454185332403167531121604115885491678,
        6681228048654935837785513255926370252642350887153989294643471335821668951431,
        9757862531355976237778433359140475580117387774787157384413123115365561787026,
        13616220044877285161503895923482850309084951207868853897420791306979689098129,
        2304158710300546927861191935173517948721924161625644542243940926385959782807,
        8916430230669790643494294122122989722763255166898893574574901816904366995603,
        16989595692585435949050096594608350595705087042452341237199670574663282451884,
        7142605451290999351004232251091690933774254139811595621053809233359684376409,
        88520140247697604200162269242788487095506754395889155561696938068724804017,
        578599767467166175190690867567265619198212062103534979230908555229580923666,
        5719858701182344033567117652083594958518086215424351404182115083906608544481,
        19929764997504809716299955922707590345937099838500699824047236452841595234375,
        17805232390813963305403284326240529275310666364113565324968510063069327108531,
        13582001420942064930777227298754298587099309206300857002435843253383192055119,
        4927110739133637242022389199794219909525729963893459711875358164457847862479,
        1072859101104901904008374407308149007369922208670764459538333298023663271483,
        8497205564236379055047558213239528720057274867100269283353696934548372742976,
        4598640852634352204349046940979358435975618677782921151920917694109308385354,
        16154882983881508907035294144291589587886974651506200143698779614356443894316,
        18763170431330561852331934752910721357571147344978368617644426013558752684826,
        1711165990797212128832591372711397451486113735966528244212317883733537974952,
        10920607154036888393960509813484219566856150798865758822927623098683495910909,
        8195065307102730891664800999552833833193042002144607037520060695259890388558,
        16883289566564858605999030564542594641240714115464839914838286232776712630533
    ];

    // Calculates the merkle chain root of the challenge tiles offsets, and calculates and outputs
    // the resulting challenge tiles
    component calcMerkleChainRoot = CalcMerkleChainRoot(2 * tileCount);
    for (var i = 0; i < tileCount; i++) {
        calcMerkleChainRoot.in[2 * i] <== challengeTilesOffsetsXValues[i];
        calcMerkleChainRoot.in[2 * i + 1] <== challengeTilesOffsetsYValues[i];

        challengeTilesXValues[i] <== x + challengeTilesOffsetsXValues[i];
        challengeTilesYValues[i] <== y + challengeTilesOffsetsYValues[i];
    }

    // Verifies that the challenge tiles offsets are valid
    signal offsetsRoot <== calcMerkleChainRoot.out;
    signal isValidOffsetList <== IsEqualToAny(directionCount)(offsetsRoot, offsetsRootList);
    isValidOffsetList === 1;
}
