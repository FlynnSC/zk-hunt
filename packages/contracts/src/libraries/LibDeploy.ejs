// SPDX-License-Identifier: Unlicense
pragma solidity >=0.8.0;

// Foundry
import { DSTest } from "ds-test/test.sol";
import { console } from "forge-std/console.sol";
import { Cheats } from "../test/utils/Cheats.sol";

// Solecs 
import { World } from "solecs/World.sol";
import { Component } from "solecs/Component.sol";
import { getAddressById } from "solecs/utils.sol";
import { IUint256Component } from "solecs/interfaces/IUint256Component.sol";
import { ISystem } from "solecs/interfaces/ISystem.sol";

// Components
<% components.forEach(component => { -%>
import { <%= component %>, ID as <%= component %>ID } from "../components/<%- component %>.sol";
<% }); -%>

// Systems and dependencies
<% systems.forEach(system => { -%>
import { <%= system.name %>, ID as <%= system.name %>ID } from "../systems/<%- system.name %>.sol";
<% system.dependencies?.forEach(dependency => { -%>
<% if (!dependency.endsWith(".js") && !dependency.startsWith("0x")) { -%>
import { <%= dependency %> } from "../dependencies/<%- dependency %>.sol";
<% } -%>
<% }); -%>
<% }); -%>

Cheats constant vm = Cheats(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);

struct DeployResult {
  World world;
  address deployer;
}

library LibDeploy {

  function deploy(
    address _deployer,
    address _world,
    bool _reuseComponents
  ) internal returns (DeployResult memory result) {
    result.deployer = _deployer;

    // ------------------------
    // Deploy 
    // ------------------------

    // Deploy world
    result.world = _world == address(0) ? new World() : World(_world);
    if(_world == address(0)) result.world.init(); // Init if it's a fresh world

      // Deploy components
    if(!_reuseComponents) {
      Component comp;
<% components.forEach(component => { %>
      console.log("Deploying <%= component %>");
      comp = new <%= component %>(address(result.world));
      console.log(address(comp));
<% });%>
    } 
    
    deploySystems(address(result.world), true);
  }
    
  
  function authorizeWriter(IUint256Component components, uint256 componentId, address writer) internal {
    Component(getAddressById(components, componentId)).authorizeWriter(writer);
  }
  
  function deploySystems(address _world, bool init) internal {
    World world = World(_world);
    // Deploy systems
    ISystem system; 
    IUint256Component components = world.components();
<% systems.forEach(system => { %>
<% if (system.dependencies) { %>
    console.log("Deploying <%= system.name %> dependencies");
    address[<%= system.dependencies.length %>] memory dependencies<%= system.name %>;
<% system.dependencies.forEach((dependency, index) => { -%>
<% if (dependency.endsWith(".js")) { -%>
    // TODO get rid of this js stuff???
    string[] memory dep<%= index %>Inputs = new string[](2);
    dep<%= index %>Inputs[0] = "node";
    dep<%= index %>Inputs[1] = "src/dependencies/<%= dependency %>";
    bytes memory dep<%= index %>Result = vm.ffi(dep<%= index %>Inputs);
    dependencies<%= system.name %>[<%= index %>] = abi.decode(dep<%= index %>Result, (address));
<% } else if (dependency.startsWith("0x")) { -%>
    dependencies<%= system.name %>[<%= index %>] = address(<%= dependency %>);
<% } else { -%>
    dependencies<%= system.name %>[<%= index %>] = address(new <%= dependency %>());
<% } -%>
<% }); -%>
<% } %>
    console.log("Deploying <%= system.name %>");
    system = new <%= system.name %>(world, address(components)<%
if (system.dependencies) { -%>
    <%_ system.dependencies.forEach((_, index) => { -%>
, dependencies<%= system.name %>[<%= index %>]<%_ }); -%>
<% } -%>
);
    world.registerSystem(address(system), <%= system.name %>ID);
<% system.writeAccess?.forEach(component => { -%>
<% if(component === "*") { -%>
<% components.forEach(comp=> { -%>
    authorizeWriter(components, <%= comp %>ID, address(system));
<% });-%>
<% } else { -%>
    authorizeWriter(components, <%= component %>ID, address(system));
<% } -%>
<% });-%>
<% if(system.initialize) { -%>
    // TODO undoooo
    // if(init) system.execute(<%= system.initialize -%>);
    if (init) {
        // 17230361230618923029804386078532454441100514055483021258772027460272059882604977523049704817019168378877510441677440676042879568386869989587185542080808293318765246144574207024652891540435505878696206043050453736205014197659869463563545817063857669517828758716614842610527709215790098808839
        uint256[] memory chunks = new uint256[](8);
        chunks[0] = uint256(0x30000008e0701400dfe07e0007c1ffc003c3ffc1018263c70060801f00c0007);
        chunks[1] = uint256(0x1fe0a0009fc006033f1e0c0e383c3c3c6078f03c807000e0000001c4000006);
        chunks[2] = uint256(0x1d07cf00020e0a00001c0408002001101c0406307c1d01f0f00e03e1c01f0382);
        chunks[3] = uint256(0x3893ffc3e1615e0383808002000000000000f00078dfe087e38);
        // chunks[0] = uint256(0x30000000e0701400df007e0007c1408003c383811c0203c70063e01f00c0007);
        // chunks[1] = uint256(0x174020008fc000033f1e0c06003c3c3c6068803c807000e0000001c4000006);
        // chunks[2] = uint256(0x1d03cf0002040800001c0408002001101c0406307c150080f00e0361801f0382);
        // chunks[3] = uint256(0x3893fcc3a1615e0383808002000000000000e000701fe085e38);
        // chunks[4] = uint256(0x800000000000000000000000000000);
        // chunks[5] = uint256(0x0);
        // chunks[6] = uint256(0x0);
        // chunks[7] = uint256(0x1c000000000f800000000070000000000200000000);
        system.execute(abi.encode(chunks));
    }
<% } -%>
    console.log(address(system));
<% });%>
  }
}