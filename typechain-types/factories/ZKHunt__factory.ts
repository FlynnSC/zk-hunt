/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ZKHunt, ZKHuntInterface } from "../ZKHunt";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_poseidonAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_jungleMoveVerifierAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_jungleEnterVerifierAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct ZKHunt.Position",
        name: "newPosition",
        type: "tuple",
      },
    ],
    name: "PlayerJungleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct ZKHunt.Position",
        name: "newPosition",
        type: "tuple",
      },
    ],
    name: "PlayerJungleExit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "commitment",
        type: "uint256",
      },
    ],
    name: "PlayerJungleMove",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct ZKHunt.Position",
        name: "newPosition",
        type: "tuple",
      },
    ],
    name: "PlayerPlainsMove",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "activatePlayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        internalType: "struct ZKHunt.Position",
        name: "newPosition",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "commitment",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "proof",
        type: "uint256",
      },
    ],
    name: "jungleEnter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        internalType: "struct ZKHunt.Position",
        name: "oldPosition",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "oldPositionNonce",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        internalType: "struct ZKHunt.Position",
        name: "newPosition",
        type: "tuple",
      },
    ],
    name: "jungleExit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "commitment",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "proof",
        type: "uint256",
      },
    ],
    name: "jungleMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mapData",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        internalType: "struct ZKHunt.Position",
        name: "newPosition",
        type: "tuple",
      },
    ],
    name: "plainsMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "playerHiddenPositionCommitments",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "playerKnownPositions",
    outputs: [
      {
        internalType: "uint8",
        name: "x",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "y",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newMapData",
        type: "uint256",
      },
    ],
    name: "setMapData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200153d3803806200153d83398181016040528101906200003791906200016c565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620001c8565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001348262000107565b9050919050565b620001468162000127565b81146200015257600080fd5b50565b60008151905062000166816200013b565b92915050565b60008060006060848603121562000188576200018762000102565b5b6000620001988682870162000155565b9350506020620001ab8682870162000155565b9250506040620001be8682870162000155565b9150509250925092565b61136580620001d86000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80636cb12b05116100665780636cb12b051461011c578063a365545614610138578063daf3d4ef14610154578063dc3319cd14610185578063ed05304a146101a357610093565b806309d5722f146100985780631688921f146100b45780634e0e0262146100d05780634ed3991714610100575b600080fd5b6100b260048036038101906100ad9190610c15565b6101bf565b005b6100ce60048036038101906100c99190610c7c565b610388565b005b6100ea60048036038101906100e59190610ce3565b61060e565b6040516100f79190610d1f565b60405180910390f35b61011a60048036038101906101159190610d3a565b610626565b005b61013660048036038101906101319190610d67565b610630565b005b610152600480360381019061014d9190610dba565b6107c3565b005b61016e60048036038101906101699190610ce3565b610a03565b60405161017c929190610e16565b60405180910390f35b61018d610a41565b60405161019a9190610d1f565b60405180910390f35b6101bd60048036038101906101b89190610ce3565b610a47565b005b83600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661024c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024390610e9c565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146102ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b190610f08565b60405180910390fd5b6102e4848036038101906102ce9190611035565b838036038101906102df9190611035565b610aa2565b81600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181610330919061119b565b9050508473ffffffffffffffffffffffffffffffffffffffff167f3f12215a531654a8222312b8347bdce3eff2a1ed66728e3da9fe69a594cce1cd83604051610379919061120e565b60405180910390a25050505050565b83600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040c90610e9c565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047a90610f08565b60405180910390fd5b6000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610525816040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff1681525050868036038101906105209190611035565b610aa2565b84600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181610571919061119b565b90505083600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff167f96025539254f8f32c2ad26175a0378546559e090d01a86f52c422237a46f101c866040516105fe919061120e565b60405180910390a2505050505050565b60066020528060005260406000206000915090505481565b8060038190555050565b82600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490610e9c565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461072b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072290610f08565b60405180910390fd5b82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f53a6f5eee38f78ea71c2495efc486ed9a12f6a4885f888cfe686f881ac664d45846040516107b59190610d1f565b60405180910390a250505050565b81600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610850576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084790610e9c565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b590610f08565b60405180910390fd5b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610960816040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff16815250508480360381019061095b9190611035565b610aa2565b82600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081816109ac919061119b565b9050508373ffffffffffffffffffffffffffffffffffffffff167f1f3e5b8f8d031e86d8ff3caed94a61c0aad0d016acf09c9273bfa75f2dcc4dab846040516109f5919061120e565b60405180910390a250505050565b60056020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b60035481565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6001610ab682602001518460200151610b19565b610ac883600001518560000151610b19565b610ad29190611258565b60ff1614610b15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0c906112db565b60405180910390fd5b5050565b60008160ff168360ff1611610b39578282610b3491906112fb565b610b46565b8183610b4591906112fb565b5b905092915050565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b8882610b5d565b9050919050565b610b9881610b7d565b8114610ba357600080fd5b50565b600081359050610bb581610b8f565b92915050565b600080fd5b600060408284031215610bd657610bd5610bbb565b5b81905092915050565b6000819050919050565b610bf281610bdf565b8114610bfd57600080fd5b50565b600081359050610c0f81610be9565b92915050565b60008060008060c08587031215610c2f57610c2e610b58565b5b6000610c3d87828801610ba6565b9450506020610c4e87828801610bc0565b9350506060610c5f87828801610c00565b9250506080610c7087828801610bc0565b91505092959194509250565b60008060008060a08587031215610c9657610c95610b58565b5b6000610ca487828801610ba6565b9450506020610cb587828801610bc0565b9350506060610cc687828801610c00565b9250506080610cd787828801610c00565b91505092959194509250565b600060208284031215610cf957610cf8610b58565b5b6000610d0784828501610ba6565b91505092915050565b610d1981610bdf565b82525050565b6000602082019050610d346000830184610d10565b92915050565b600060208284031215610d5057610d4f610b58565b5b6000610d5e84828501610c00565b91505092915050565b600080600060608486031215610d8057610d7f610b58565b5b6000610d8e86828701610ba6565b9350506020610d9f86828701610c00565b9250506040610db086828701610c00565b9150509250925092565b60008060608385031215610dd157610dd0610b58565b5b6000610ddf85828601610ba6565b9250506020610df085828601610bc0565b9150509250929050565b600060ff82169050919050565b610e1081610dfa565b82525050565b6000604082019050610e2b6000830185610e07565b610e386020830184610e07565b9392505050565b600082825260208201905092915050565b7f506c61796572206e6f7420616374697665000000000000000000000000000000600082015250565b6000610e86601183610e3f565b9150610e9182610e50565b602082019050919050565b60006020820190508181036000830152610eb581610e79565b9050919050565b7f4e6f7420746865206f776e6572206f66207468697320706c6179657200000000600082015250565b6000610ef2601c83610e3f565b9150610efd82610ebc565b602082019050919050565b60006020820190508181036000830152610f2181610ee5565b9050919050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f7682610f2d565b810181811067ffffffffffffffff82111715610f9557610f94610f3e565b5b80604052505050565b6000610fa8610b4e565b9050610fb48282610f6d565b919050565b610fc281610dfa565b8114610fcd57600080fd5b50565b600081359050610fdf81610fb9565b92915050565b600060408284031215610ffb57610ffa610f28565b5b6110056040610f9e565b9050600061101584828501610fd0565b600083015250602061102984828501610fd0565b60208301525092915050565b60006040828403121561104b5761104a610b58565b5b600061105984828501610fe5565b91505092915050565b6000813561106f81610fb9565b80915050919050565b60008160001b9050919050565b600060ff61109284611078565b9350801983169250808416831791505092915050565b6000819050919050565b60006110cd6110c86110c384610dfa565b6110a8565b610dfa565b9050919050565b6000819050919050565b6110e7826110b2565b6110fa6110f3826110d4565b8354611085565b8255505050565b60008160081b9050919050565b600061ff0061111c84611101565b9350801983169250808416831791505092915050565b61113b826110b2565b61114e611147826110d4565b835461110e565b8255505050565b60008101600083018061116781611062565b905061117381846110de565b50505060008101602083018061118881611062565b90506111948184611132565b5050505050565b6111a58282611155565b5050565b60006111b86020840184610fd0565b905092915050565b6111c981610dfa565b82525050565b604082016111e060008301836111a9565b6111ed60008501826111c0565b506111fb60208301836111a9565b61120860208501826111c0565b50505050565b600060408201905061122360008301846111cf565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061126382610dfa565b915061126e83610dfa565b92508260ff0382111561128457611283611229565b5b828201905092915050565b7f496e76616c6964206d6f76650000000000000000000000000000000000000000600082015250565b60006112c5600c83610e3f565b91506112d08261128f565b602082019050919050565b600060208201905081810360008301526112f4816112b8565b9050919050565b600061130682610dfa565b915061131183610dfa565b92508282101561132457611323611229565b5b82820390509291505056fea2646970667358221220b02351a9cefe165f14f318455ce26ec01fd2ee88d2d10b59a61508f704dd45da64736f6c634300080c0033";

type ZKHuntConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZKHuntConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZKHunt__factory extends ContractFactory {
  constructor(...args: ZKHuntConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _poseidonAddress: PromiseOrValue<string>,
    _jungleMoveVerifierAddress: PromiseOrValue<string>,
    _jungleEnterVerifierAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ZKHunt> {
    return super.deploy(
      _poseidonAddress,
      _jungleMoveVerifierAddress,
      _jungleEnterVerifierAddress,
      overrides || {}
    ) as Promise<ZKHunt>;
  }
  override getDeployTransaction(
    _poseidonAddress: PromiseOrValue<string>,
    _jungleMoveVerifierAddress: PromiseOrValue<string>,
    _jungleEnterVerifierAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _poseidonAddress,
      _jungleMoveVerifierAddress,
      _jungleEnterVerifierAddress,
      overrides || {}
    );
  }
  override attach(address: string): ZKHunt {
    return super.attach(address) as ZKHunt;
  }
  override connect(signer: Signer): ZKHunt__factory {
    return super.connect(signer) as ZKHunt__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZKHuntInterface {
    return new utils.Interface(_abi) as ZKHuntInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ZKHunt {
    return new Contract(address, _abi, signerOrProvider) as ZKHunt;
  }
}
