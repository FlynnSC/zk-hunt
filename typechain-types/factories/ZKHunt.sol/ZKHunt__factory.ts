/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { ZKHunt, ZKHuntInterface } from "../../ZKHunt.sol/ZKHunt";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "poseidonAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "jungleMoveVerifierAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "jungleEnterVerifierAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "PlayerActivated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct ZKHunt.Position",
        name: "newPosition",
        type: "tuple",
      },
    ],
    name: "PlayerJungleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct ZKHunt.Position",
        name: "newPosition",
        type: "tuple",
      },
    ],
    name: "PlayerJungleExit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "commitment",
        type: "uint256",
      },
    ],
    name: "PlayerJungleMove",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct ZKHunt.Position",
        name: "newPosition",
        type: "tuple",
      },
    ],
    name: "PlayerPlainsMove",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "activatePlayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        internalType: "struct ZKHunt.Position",
        name: "position",
        type: "tuple",
      },
    ],
    name: "getMapTileValue",
    outputs: [
      {
        internalType: "enum ZKHunt.TileType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        internalType: "struct ZKHunt.Position",
        name: "newPosition",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "commitment",
        type: "uint256",
      },
      {
        internalType: "uint256[8]",
        name: "proofData",
        type: "uint256[8]",
      },
    ],
    name: "jungleEnter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        internalType: "struct ZKHunt.Position",
        name: "oldPosition",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "oldPositionNonce",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        internalType: "struct ZKHunt.Position",
        name: "newPosition",
        type: "tuple",
      },
    ],
    name: "jungleExit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "newCommitment",
        type: "uint256",
      },
      {
        internalType: "uint256[8]",
        name: "proofData",
        type: "uint256[8]",
      },
    ],
    name: "jungleMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mapData",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "x",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "y",
            type: "uint8",
          },
        ],
        internalType: "struct ZKHunt.Position",
        name: "newPosition",
        type: "tuple",
      },
    ],
    name: "plainsMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "playerHiddenPositionCommitments",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "playerKnownPositions",
    outputs: [
      {
        internalType: "uint8",
        name: "x",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "y",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "playersActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newMapData",
        type: "uint256",
      },
    ],
    name: "setMapData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "";

type ZKHuntConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZKHuntConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZKHunt__factory extends ContractFactory {
  constructor(...args: ZKHuntConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    poseidonAddress: PromiseOrValue<string>,
    jungleMoveVerifierAddress: PromiseOrValue<string>,
    jungleEnterVerifierAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ZKHunt> {
    return super.deploy(
      poseidonAddress,
      jungleMoveVerifierAddress,
      jungleEnterVerifierAddress,
      overrides || {}
    ) as Promise<ZKHunt>;
  }
  override getDeployTransaction(
    poseidonAddress: PromiseOrValue<string>,
    jungleMoveVerifierAddress: PromiseOrValue<string>,
    jungleEnterVerifierAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      poseidonAddress,
      jungleMoveVerifierAddress,
      jungleEnterVerifierAddress,
      overrides || {}
    );
  }
  override attach(address: string): ZKHunt {
    return super.attach(address) as ZKHunt;
  }
  override connect(signer: Signer): ZKHunt__factory {
    return super.connect(signer) as ZKHunt__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZKHuntInterface {
    return new utils.Interface(_abi) as ZKHuntInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ZKHunt {
    return new Contract(address, _abi, signerOrProvider) as ZKHunt;
  }
}
