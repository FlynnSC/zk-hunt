/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ZKHunt {
  export type PositionStruct = {
    x: PromiseOrValue<BigNumberish>;
    y: PromiseOrValue<BigNumberish>;
  };

  export type PositionStructOutput = [number, number] & {
    x: number;
    y: number;
  };
}

export interface ZKHuntInterface extends utils.Interface {
  functions: {
    "activatePlayer(address)": FunctionFragment;
    "getMapTileValue((uint8,uint8))": FunctionFragment;
    "jungleEnter(address,(uint8,uint8),uint256,uint256[8])": FunctionFragment;
    "jungleExit(address,(uint8,uint8),uint256,(uint8,uint8))": FunctionFragment;
    "jungleMove(address,uint256,uint256[8])": FunctionFragment;
    "mapData()": FunctionFragment;
    "plainsMove(address,(uint8,uint8))": FunctionFragment;
    "playerHiddenPositionCommitments(address)": FunctionFragment;
    "playerKnownPositions(address)": FunctionFragment;
    "playersActive(address)": FunctionFragment;
    "setMapData(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activatePlayer"
      | "getMapTileValue"
      | "jungleEnter"
      | "jungleExit"
      | "jungleMove"
      | "mapData"
      | "plainsMove"
      | "playerHiddenPositionCommitments"
      | "playerKnownPositions"
      | "playersActive"
      | "setMapData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activatePlayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMapTileValue",
    values: [ZKHunt.PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "jungleEnter",
    values: [
      PromiseOrValue<string>,
      ZKHunt.PositionStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "jungleExit",
    values: [
      PromiseOrValue<string>,
      ZKHunt.PositionStruct,
      PromiseOrValue<BigNumberish>,
      ZKHunt.PositionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "jungleMove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "mapData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "plainsMove",
    values: [PromiseOrValue<string>, ZKHunt.PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "playerHiddenPositionCommitments",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerKnownPositions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playersActive",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMapData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activatePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMapTileValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jungleEnter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jungleExit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jungleMove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mapData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plainsMove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerHiddenPositionCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerKnownPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playersActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMapData", data: BytesLike): Result;

  events: {
    "PlayerActivated(address)": EventFragment;
    "PlayerJungleEnter(address,tuple)": EventFragment;
    "PlayerJungleExit(address,tuple)": EventFragment;
    "PlayerJungleMove(address,uint256)": EventFragment;
    "PlayerPlainsMove(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PlayerActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerJungleEnter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerJungleExit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerJungleMove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerPlainsMove"): EventFragment;
}

export interface PlayerActivatedEventObject {
  player: string;
}
export type PlayerActivatedEvent = TypedEvent<
  [string],
  PlayerActivatedEventObject
>;

export type PlayerActivatedEventFilter = TypedEventFilter<PlayerActivatedEvent>;

export interface PlayerJungleEnterEventObject {
  player: string;
  newPosition: ZKHunt.PositionStructOutput;
}
export type PlayerJungleEnterEvent = TypedEvent<
  [string, ZKHunt.PositionStructOutput],
  PlayerJungleEnterEventObject
>;

export type PlayerJungleEnterEventFilter =
  TypedEventFilter<PlayerJungleEnterEvent>;

export interface PlayerJungleExitEventObject {
  player: string;
  newPosition: ZKHunt.PositionStructOutput;
}
export type PlayerJungleExitEvent = TypedEvent<
  [string, ZKHunt.PositionStructOutput],
  PlayerJungleExitEventObject
>;

export type PlayerJungleExitEventFilter =
  TypedEventFilter<PlayerJungleExitEvent>;

export interface PlayerJungleMoveEventObject {
  player: string;
  commitment: BigNumber;
}
export type PlayerJungleMoveEvent = TypedEvent<
  [string, BigNumber],
  PlayerJungleMoveEventObject
>;

export type PlayerJungleMoveEventFilter =
  TypedEventFilter<PlayerJungleMoveEvent>;

export interface PlayerPlainsMoveEventObject {
  player: string;
  newPosition: ZKHunt.PositionStructOutput;
}
export type PlayerPlainsMoveEvent = TypedEvent<
  [string, ZKHunt.PositionStructOutput],
  PlayerPlainsMoveEventObject
>;

export type PlayerPlainsMoveEventFilter =
  TypedEventFilter<PlayerPlainsMoveEvent>;

export interface ZKHunt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZKHuntInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activatePlayer(
      player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMapTileValue(
      position: ZKHunt.PositionStruct,
      overrides?: CallOverrides
    ): Promise<[number]>;

    jungleEnter(
      player: PromiseOrValue<string>,
      newPosition: ZKHunt.PositionStruct,
      commitment: PromiseOrValue<BigNumberish>,
      proofData: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    jungleExit(
      player: PromiseOrValue<string>,
      oldPosition: ZKHunt.PositionStruct,
      oldPositionNonce: PromiseOrValue<BigNumberish>,
      newPosition: ZKHunt.PositionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    jungleMove(
      player: PromiseOrValue<string>,
      newCommitment: PromiseOrValue<BigNumberish>,
      proofData: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mapData(overrides?: CallOverrides): Promise<[BigNumber]>;

    plainsMove(
      player: PromiseOrValue<string>,
      newPosition: ZKHunt.PositionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    playerHiddenPositionCommitments(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    playerKnownPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { x: number; y: number }>;

    playersActive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setMapData(
      newMapData: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activatePlayer(
    player: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMapTileValue(
    position: ZKHunt.PositionStruct,
    overrides?: CallOverrides
  ): Promise<number>;

  jungleEnter(
    player: PromiseOrValue<string>,
    newPosition: ZKHunt.PositionStruct,
    commitment: PromiseOrValue<BigNumberish>,
    proofData: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  jungleExit(
    player: PromiseOrValue<string>,
    oldPosition: ZKHunt.PositionStruct,
    oldPositionNonce: PromiseOrValue<BigNumberish>,
    newPosition: ZKHunt.PositionStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  jungleMove(
    player: PromiseOrValue<string>,
    newCommitment: PromiseOrValue<BigNumberish>,
    proofData: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mapData(overrides?: CallOverrides): Promise<BigNumber>;

  plainsMove(
    player: PromiseOrValue<string>,
    newPosition: ZKHunt.PositionStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  playerHiddenPositionCommitments(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  playerKnownPositions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, number] & { x: number; y: number }>;

  playersActive(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setMapData(
    newMapData: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activatePlayer(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMapTileValue(
      position: ZKHunt.PositionStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    jungleEnter(
      player: PromiseOrValue<string>,
      newPosition: ZKHunt.PositionStruct,
      commitment: PromiseOrValue<BigNumberish>,
      proofData: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    jungleExit(
      player: PromiseOrValue<string>,
      oldPosition: ZKHunt.PositionStruct,
      oldPositionNonce: PromiseOrValue<BigNumberish>,
      newPosition: ZKHunt.PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    jungleMove(
      player: PromiseOrValue<string>,
      newCommitment: PromiseOrValue<BigNumberish>,
      proofData: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mapData(overrides?: CallOverrides): Promise<BigNumber>;

    plainsMove(
      player: PromiseOrValue<string>,
      newPosition: ZKHunt.PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    playerHiddenPositionCommitments(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerKnownPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { x: number; y: number }>;

    playersActive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setMapData(
      newMapData: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PlayerActivated(address)"(player?: null): PlayerActivatedEventFilter;
    PlayerActivated(player?: null): PlayerActivatedEventFilter;

    "PlayerJungleEnter(address,tuple)"(
      player?: PromiseOrValue<string> | null,
      newPosition?: null
    ): PlayerJungleEnterEventFilter;
    PlayerJungleEnter(
      player?: PromiseOrValue<string> | null,
      newPosition?: null
    ): PlayerJungleEnterEventFilter;

    "PlayerJungleExit(address,tuple)"(
      player?: PromiseOrValue<string> | null,
      newPosition?: null
    ): PlayerJungleExitEventFilter;
    PlayerJungleExit(
      player?: PromiseOrValue<string> | null,
      newPosition?: null
    ): PlayerJungleExitEventFilter;

    "PlayerJungleMove(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      commitment?: null
    ): PlayerJungleMoveEventFilter;
    PlayerJungleMove(
      player?: PromiseOrValue<string> | null,
      commitment?: null
    ): PlayerJungleMoveEventFilter;

    "PlayerPlainsMove(address,tuple)"(
      player?: PromiseOrValue<string> | null,
      newPosition?: null
    ): PlayerPlainsMoveEventFilter;
    PlayerPlainsMove(
      player?: PromiseOrValue<string> | null,
      newPosition?: null
    ): PlayerPlainsMoveEventFilter;
  };

  estimateGas: {
    activatePlayer(
      player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMapTileValue(
      position: ZKHunt.PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jungleEnter(
      player: PromiseOrValue<string>,
      newPosition: ZKHunt.PositionStruct,
      commitment: PromiseOrValue<BigNumberish>,
      proofData: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    jungleExit(
      player: PromiseOrValue<string>,
      oldPosition: ZKHunt.PositionStruct,
      oldPositionNonce: PromiseOrValue<BigNumberish>,
      newPosition: ZKHunt.PositionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    jungleMove(
      player: PromiseOrValue<string>,
      newCommitment: PromiseOrValue<BigNumberish>,
      proofData: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mapData(overrides?: CallOverrides): Promise<BigNumber>;

    plainsMove(
      player: PromiseOrValue<string>,
      newPosition: ZKHunt.PositionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    playerHiddenPositionCommitments(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerKnownPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playersActive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMapData(
      newMapData: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activatePlayer(
      player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMapTileValue(
      position: ZKHunt.PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jungleEnter(
      player: PromiseOrValue<string>,
      newPosition: ZKHunt.PositionStruct,
      commitment: PromiseOrValue<BigNumberish>,
      proofData: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    jungleExit(
      player: PromiseOrValue<string>,
      oldPosition: ZKHunt.PositionStruct,
      oldPositionNonce: PromiseOrValue<BigNumberish>,
      newPosition: ZKHunt.PositionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    jungleMove(
      player: PromiseOrValue<string>,
      newCommitment: PromiseOrValue<BigNumberish>,
      proofData: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mapData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plainsMove(
      player: PromiseOrValue<string>,
      newPosition: ZKHunt.PositionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    playerHiddenPositionCommitments(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerKnownPositions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playersActive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMapData(
      newMapData: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
